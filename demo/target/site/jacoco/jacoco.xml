<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="demo"><sessioninfo id="CO-IT006827-11b1781" start="1718683644004" dump="1718683646127"/><sessioninfo id="CO-IT006827-535e8038" start="1718683736989" dump="1718683742933"/><sessioninfo id="CO-IT006827-b931924a" start="1718684817070" dump="1718684823275"/><package name="com/example"><class name="com/example/Functions" sourcefilename="Functions.java"><method name="&lt;init&gt;" desc="()V" line="6"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Ljava/lang/Double;Ljava/lang/Double;)D" line="10"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Ljava/lang/Double;Ljava/lang/Double;)D" line="19"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="substraction" desc="(Ljava/lang/Double;Ljava/lang/Double;)D" line="28"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="division" desc="(Ljava/lang/Double;Ljava/lang/Double;)D" line="37"><counter type="INSTRUCTION" missed="6" covered="19"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="67"/><counter type="BRANCH" missed="5" covered="13"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="5" covered="9"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Functions.java"><line nr="6" mi="0" ci="3" mb="0" cb="0"/><line nr="10" mi="0" ci="4" mb="1" cb="3"/><line nr="11" mi="0" ci="5" mb="0" cb="0"/><line nr="14" mi="0" ci="6" mb="0" cb="0"/><line nr="19" mi="0" ci="4" mb="1" cb="3"/><line nr="20" mi="0" ci="5" mb="0" cb="0"/><line nr="23" mi="0" ci="6" mb="0" cb="0"/><line nr="28" mi="0" ci="4" mb="1" cb="3"/><line nr="29" mi="0" ci="5" mb="0" cb="0"/><line nr="32" mi="0" ci="6" mb="0" cb="0"/><line nr="37" mi="0" ci="4" mb="1" cb="3"/><line nr="38" mi="0" ci="5" mb="0" cb="0"/><line nr="41" mi="0" ci="5" mb="1" cb="1"/><line nr="42" mi="0" ci="5" mb="0" cb="0"/><line nr="46" mi="6" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="67"/><counter type="BRANCH" missed="5" covered="13"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="5" covered="9"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="6" covered="67"/><counter type="BRANCH" missed="5" covered="13"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="5" covered="9"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></package><counter type="INSTRUCTION" missed="6" covered="67"/><counter type="BRANCH" missed="5" covered="13"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="5" covered="9"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></report>